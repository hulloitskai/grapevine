# container-linux-config

ignition:
  # Prevent infinite HTTP(s) resource loading
  timeouts:
    http_response_headers: 10
    http_total: 30


passwd:
  users:
    - name: dev
      password_hash: $6$rounds=8192$3vsN5GTvt$RdwYqtTfr/PQJ1DL.yQSYM1RJ/oOi6lRcRDLmpT3JQczhn9E0qoC7KvK9mjb5fZsNEBvQhHL2DIL9dOswgEv8/
      primary_group: users
      groups: [ sudo, docker, systemd-journal ]
      ssh_authorized_keys:
        - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIL6DIQ+E+sAaDni3VJlnxDJp6LF0s1r6SmbU6P1YMHtQ stevenxie


storage:
  files:
      # Configure .bashrc, .bash_aliases, and a minimal .bash_functions
    - path: /home/dev/.bashrc
      filesystem: root
      user:
        name: dev
      group:
        name: users
      mode: 0644
      contents:
        inline: |
          # Test for an interactive shell.
          if [[ $- != *i* ]] ; then
                  # Shell is non-interactive.  Be done now!
                  return
          fi

          # Prioritize /opt/bin, add Node to PATH
          export NODEJS_HOME=/opt/lib/nodejs/node-v10.2.1/bin
          export PATH="$NODEJS_HOME:/opt/bin:$PATH"

          # Import custom aliases and functions
          if [ -f ~/.bash_imports ]; then . ~/.bash_imports; fi

          # Enable custom colors and styling
          export CLICOLOR=1

          # Customize PS1
          PS1='\[\e[1;32m\]\u@\h\[\e[23m\]: \[\e[34m\]\w \[\e[34m\]\$\[\e[0m\] '
    - path: /home/dev/.bash_imports
      filesystem: root
      user:
        name: dev
      group:
        name: users
      mode: 0644
      contents:
        inline: |
          #!/bin/bash

          # Import bash functions...
          if [ -f ~/.bash_functions ]; then . ~/.bash_functions
          else echo -e "\e[0;31mWARN: .bash_functions NOT FOUND\033[0m"
          fi

          # Import bash aliases...
          # requires: ~/.bash_functions has been sourced
          if [ -f $HOME/.bash_aliases ]; then . $HOME/.bash_aliases
          else warn "WARN: .bash_aliases NOT FOUND"
          fi
    - path: /home/dev/.bash_functions
      filesystem: root
      user:
        name: dev
      group:
        name: users
      mode: 0644
      contents:
        inline: |
          #!/bin/bash

          # warn $STRING -> echo $STRING in red
          warn() {
              echo -en "\e[0;31m"
              echo $1
              echo -en "\033[0m"
          }

          # transfer $FILE -> upload $FILE using transfer.sh
          transfer() {
              curl --upload-file $1 https://transfer.sh/${1##*/}
          }

          # trash $FILES_OR_DIRS -> moves $FILES_OR_DIRS to ~/.Trash
          trash () {
            for file in $@; do mv $file ~/.Trash/$file; done
          }
    - path: /home/dev/.bash_aliases
      filesystem: root
      user:
        name: dev
      group:
        name: users
      mode: 0644
      contents:
        inline: |
          #!/bin/bash

          # chstat $FILE_OR_DIR -> show $FILE_OR_DIR permissions in
          #   numerical form
          if [[ $(uname -s) == "Darwin" ]]
          then alias chstat="stat -f '%A'"
          else alias chstat="stat --format '%a'"
          fi

          ## Git:
          # git-stat -> git status
          alias git-stat="git status"

          # git-co -> git checkout
          alias git-co="git checkout"

          # git-br -> get name of current Git branch
          alias git-br="git branch | grep -e "^*" | cut -d' ' -f 2"

          # git-rev $FILES_OR_DIRS -> revert $FILES_OR_DIRS to staged version
          alias git-rev="git checkout --"

          # git-prune-local -> prunes local branches that have been
          #   merged into remote
          alias git-prune-local="git branch --merged | tail -n +2 >/tmp/merged-branches && vi /tmp/merged-branches && xargs git branch -d </tmp/merged-branches && rm /tmp/merged-branches"

          # git-discard -> discard local changes in favor of remote data
          alias git-discard="git fetch --all && git reset --hard @{u}"

          ## Docker:
          # docker-prunei -> prunes docker images
          alias docker-prunei="docker image prune"

          # docker-prune -> docker container prune
          alias docker-prune="docker container prune"

          ## List:
          # ll -> show owner and permissions for a file/dir
          if [[ $(type -t ll) == "" ]]; then alias ll="ls -l"; fi

          # la -> list all files (including hidden)
          if [[ $(type -t la) == "" ]]; then alias la="ls -a"; fi

      # Configure custom .vimrc
    - path: /home/dev/.vimrc
      filesystem: root
      user:
        name: dev
      group:
        name: users
      mode: 0644
      contents:
        inline: |
          "" CUSTOM VIM CONFIG
          " filetype plugin indent on
          " syntax on

          "" General
          set number        " Show line numbers
          set wrap
          set wrapmargin=0
          set linebreak     " Break lines at word (requires Wrap lines)
          set nolist
          set showbreak=+++ " Wrap-broken line prefix
          set textwidth=0   " Line wrap (number of cols)
          set showmatch     " Highlight matching brace
          set errorbells    " Beep or flash screen on errors

          set hlsearch      " Highlight all search results
          set smartcase     " Enable smart-case search
          set ignorecase    " Always case-insensitive
          set incsearch     " Searches for strings incrementally

          set autoindent    " Auto-indent new lines
          set shiftwidth=4  " Number of auto-indent spaces
          set smartindent   " Enable smart-indent
          set smarttab		" Enable smart-tabs
          set softtabstop=4	" Number of spaces per Tab

          "" Advanced
          set ruler	        " Show row and column ruler information
          set undolevels=1000               " Number of undo levels
          set backspace=indent,eol,start    " Backspace behaviour

      # Configure `sshd`, prevent password authentication
    - path: /etc/ssh/sshd_config
      filesystem: root
      mode: 0600
      contents:
        inline: |
          UsePrivilegeSeparation sandbox
          Subsystem sftp internal-sftp
          ClientAliveInterval 180
          UseDNS no
          UsePAM no

          PermitRootLogin no
          AllowUsers core dev
          AuthenticationMethods publickey
          PrintMotd no

      # Set SSH key for accessing Git repositories as
      #   'steven-xie' / 'stevenxie'
    - path: /home/dev/.ssh/git-extern
      filesystem: root
      user:
        name: dev
      group:
        name: users
      mode: 0600
      contents:
        inline: |
          -----BEGIN OPENSSH PRIVATE KEY-----
          b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW
          QyNTUxOQAAACCqNkEKATM9s+ik79TB/KWl/jxaJY6doeMH1avEpsBJhwAAAKCghL/9oIS/
          /QAAAAtzc2gtZWQyNTUxOQAAACCqNkEKATM9s+ik79TB/KWl/jxaJY6doeMH1avEpsBJhw
          AAAEBxkgAzJe0tLsECpdI+blHwpHrcY88SHcKrLUZiYcH54Ko2QQoBMz2z6KTv1MH8paX+
          PFoljp2h4wfVq8SmwEmHAAAAF2dpdGh1Yi1leHRlcm4tc3RldmVueGllAQIDBAUG
          -----END OPENSSH PRIVATE KEY-----
    - path: /home/dev/.ssh/config
      filesystem: root
      user:
        name: dev
      group:
        name: users
      mode: 0600
      contents:
        inline: |
          Host github.com
              IdentitiesOnly yes

          Host *
              AddKeysToAgent yes
              IdentityFile ~/.ssh/git-extern
    - path: /home/dev/.ssh/known_hosts
      filesystem: root
      user:
        name: dev
      group:
        name: users
      mode: 0600
      contents:
        inline: |
          github.com,192.30.253.112 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==

      # Restrict networking to :443, :80, :22, and internal ports
    - path: /var/lib/iptables/rules-save
      filesystem: root
      mode: 0644
      contents:
        inline: |
          *filter
          :INPUT DROP [0:0]
          :FORWARD DROP [0:0]
          :OUTPUT ACCEPT [0:0]
          -A INPUT -i lo -j ACCEPT
          -A INPUT -i eth1 -j ACCEPT
          -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
          -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
          -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
          -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT
          -A INPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT
          -A INPUT -p icmp -m icmp --icmp-type 3 -j ACCEPT
          -A INPUT -p icmp -m icmp --icmp-type 11 -j ACCEPT
          COMMIT


systemd:
  units:
      # Enable autoloading of iptables
    - name: iptables-restore.service
      enabled: true

      # Links `/var/lib/docker/volumes/` to `~/docker-volumes/`
    - name: docker-volume-linker.service
      enabled: true
      contents: |
        [Unit]
        Description=Docker volume linker
        After=docker.service
        Requires=docker.service
        ConditionPathExists=!/home/dev/docker-volumes/
        ConditionPathExists=/var/lib/docker/volumes

        [Service]
        Type=oneshot
        User=dev
        WorkingDirectory=~
        ExecStartPre=+/bin/chown -R dev:docker /var/lib/docker/volumes/
        ExecStartPre=/bin/chmod -R 750 /var/lib/docker/volumes/
        ExecStart=/bin/ln -s /var/lib/docker/volumes docker-volumes

        [Install]
        WantedBy=multi-user.target

      # Install docker-compose
    - name: docker-compose-installer.service
      enabled: true
      contents: |
        [Unit]
        Description=Docker Compose installer
        After=systemd-networkd.service
        Requires=systemd-networkd.service
        ConditionPathExists=!/opt/bin/docker-compose

        [Service]
        Type=oneshot
        ExecStartPre=/bin/mkdir -p /opt /opt/bin
        ExecStart=/bin/curl -o /opt/bin/docker-compose \
                            -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-Linux-x86_64
        ExecStartPost=/bin/chmod +x /opt/bin/docker-compose

        [Install]
        WantedBy=multi-user.target

      # Clone this repository to `/home/dev/grapevine`
    - name: grapevine-cloner.service
      enabled: true
      contents: |
        [Unit]
        Description=Grapevine repository cloner
        After=systemd-networkd.service
        Requires=systemd-networkd.service
        ConditionPathExists=!/home/dev/grapevine/.git/

        [Service]
        Type=oneshot
        User=dev
        WorkingDirectory=~
        ExecStart=/usr/bin/git clone --single-branch \
                                     --branch master \
                                     --depth 1 \
                                     git@github.com:steven-xie/grapevine.git

        [Install]
        WantedBy=multi-user.target

      # Install Node
    - name: node-installer.service
      enabled: true
      contents: |
        [Unit]
        Description=Node.js installer
        After=systemd-networkd.service
        Requires=systemd-networkd.service
        ConditionPathExists=!/usr/local/lib/nodejs

        [Service]
        Type=oneshot
        ExecStartPre=/bin/curl -o /tmp/node-pkg.tar.xz https://nodejs.org/dist/v10.2.1/node-v10.2.1-linux-x64.tar.xz
        ExecStartPre=/bin/mkdir -p /opt /opt/lib /opt/lib/nodejs
        ExecStart=/bin/tar -xJvf /tmp/node-pkg.tar.xz -C /opt/lib/nodejs
        ExecStartPost=/bin/mv /opt/lib/nodejs/node-v10.2.1-linux-x64 /opt/lib/nodejs/node-v10.2.1
        ExecStartPost=/bin/rm /tmp/node-pkg.tar.xz

        [Install]
        WantedBy=yarn-installer.service

      # Install Yarn
    - name: yarn-installer.service
      enabled: true
      contents: |
        [Unit]
        Description=Yarn installer
        After=node-installer.service
        Requires=node-installer.service
        ConditionPathExists=!/home/dev/.yarn/bin/yarn

        [Service]
        Type=oneshot
        User=dev
        ExecStartPre=/bin/curl -o /tmp/yarn-install.sh -L https://yarnpkg.com/install.sh
        ExecStartPre=+/bin/chmod +x /tmp/yarn-install.sh
        ExecStart=-/bin/sh /tmp/yarn-install.sh
        ExecStartPost=/bin/rm /tmp/yarn-install.sh

        [Install]
        WantedBy=multi-user.target


update:
  group: "beta"
  server: "https://public.update.core-os.net/v1/update/"


# Until 'etcd' is configured, do not automatically reboot upon updates
locksmith:
  reboot_strategy: "off"
